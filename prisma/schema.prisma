// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  DOCTOR
}

model User {
 id              String @id @default(auto()) @map("_id") @db.ObjectId
 firstName       String
 lastName        String 
 role            UserRole   @default(USER)
 bio             String?
 website         String? 
 gender          String?
 email           String   @unique 
 active          Boolean  @default(false)
 emailVerified   DateTime?
 imageUrl        String? 
 password        String
 colorScheme     String        @default("theme-orange")
 accounts        Account[]
 sessions        Session[]
 posts         Post[]
 Home            Home[]
 Homeimage      Homeimage[]
  Favorite       Favorite[]
  Reservation    Reservation[]
 createdAt       DateTime @default(now())
 updatedAt       DateTime @updatedAt
 
}


model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String  @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
 id String @id @default(auto()) @map("_id") @db.ObjectId
 userId             String   @db.ObjectId
 type               String
 provider           String
 providerAccountId  String
 refresh_token      String?  @db.String
 access_token       String?  @db.String
 expires_at         Int?
 token_type         String?
 scope              String?
 id_token           String?  @db.String
 session_state      String?
 user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 @@unique([provider, providerAccountId])
}

model Home {
  
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  title        String?
  description  String?
  guests       String?
  bedrooms     String?
  bathrooms    String?
  country      String?
  photo        String?
  price        Int?
  categoryName String?
  Favorite     Favorite[]
  Reservation  Reservation[]

  addedCategory    Boolean @default(false)
  addedDescription Boolean @default(false)
  addedLoaction    Boolean @default(false)

  createdAT DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String? @db.ObjectId
}

model Favorite {
  id           String @id @default(auto()) @map("_id") @db.ObjectId

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
  Home   Home?   @relation(fields: [homeId], references: [id])
  homeId String? @db.ObjectId

  createAt DateTime @default(now())
}

model Reservation {
  id           String @id @default(auto()) @map("_id") @db.ObjectId

  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId 
  Home   Home?   @relation(fields: [homeId], references: [id])
  homeId String? @db.ObjectId
}

model Homeimage {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    title   String?
    fileUrl   String?      @unique
    description String?
    price    Int?
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId @map("user_id")

    @@index([userId])
}

model Post {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    caption   String?
    fileUrl   String      @unique
    
    
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId

    @@index([userId])
}